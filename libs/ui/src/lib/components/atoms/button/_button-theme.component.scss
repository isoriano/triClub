// src/styles/components/button/_variants.scss

@use 'sass:map';
@use 'sass:meta';
@use '@angular/material' as mat;

$_ripple-opacity: 0.1;

@mixin color($config-or-theme, $mat-variants, $variants) {
  $config: mat.get-color-config($config-or-theme);
  $foreground: map.get($config, foreground);
  $background: map.get($config, background);
  $primary: map.get($config, 'primary');

  .loading:before {
    border-top-color: mat.get-color-from-palette($primary, 500) !important;
  }

  @each $variant in $mat-variants {
    $palette: map.get($config, $variant);

    .mat-#{$variant} {
      &.mdc-button--outlined {
        @include _border-color($config, default, $palette);
      }
    }
  }

  @each $variant, $variant-palette in $variants {
    .mat-#{$variant} {
      &.mdc-icon-button,
      &.mdc-button--outlined {
        @include _theme-property($config, 'color', text, $variant-palette);
        @include _focus-overlay-color($variant-palette);
      }

      &.mdc-button--outlined {
        @include _border-color($config, default, $variant-palette);
      }

      &.mdc-button--unelevated,
      &.mdc-button--raised,
      &.mdc-fab {
        @include _theme-property($config, 'color', default-contrast, $variant-palette);
        @include _theme-property($config, 'background-color', default, $variant-palette);
        @include _ripple-color($config, default-contrast, $_ripple-opacity, $variant-palette);
      }
    }
  }
}

@mixin _border-color($theme, $hue, $variant-palette) {
  border-color: mat.get-color-from-palette($variant-palette, $hue);
}

// Applies a focus style to an mat-button element for each of the supported palettes.
@mixin _focus-overlay-color($variant-palette) {
  .mat-mdc-button-persistent-ripple::before {
    background-color: mat.get-color-from-palette($variant-palette);
  }
}

@mixin _ripple-color($theme, $hue, $opacity, $variant-palette) {
  $background-color: mat.get-color-from-palette($variant-palette, $hue, $opacity);
  .mdc-button__ripple::before {
    background-color: $background-color;
    @if (meta.type-of($background-color) != color) {
      opacity: $opacity;
    }
  }
}

// Applies a property to an mat-button element for each of the supported palettes.
@mixin _theme-property($theme, $property, $hue, $variant-palette) {
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);

  #{$property}: mat.get-color-from-palette($variant-palette, $hue);

  &:disabled {
    $palette: if($property == 'color', $foreground, $background);
    #{$property}: mat.get-color-from-palette($palette, disabled-button);
  }
}
